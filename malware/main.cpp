#include <SDL2/SDL.h>
#include <SDL2/SDL_image.h>
#include <SDL2/SDL_syswm.h>

#include <vector>
#include <string>

bool should_exit(SDL_Event e) {
    if (e.type == SDL_KEYDOWN && e.key.keysym.sym == SDLK_ESCAPE) {
        return true;
    }

    return false;
}

bool should_spawn(SDL_Event e) {
    if (e.type == SDL_WINDOWEVENT && e.window.event == SDL_WINDOWEVENT_CLOSE) {
        return true;
    }

    if (e.type == SDL_WINDOWEVENT && e.window.event == SDL_WINDOWEVENT_MINIMIZED) {
        return true;
    }

    if (e.type == SDL_WINDOWEVENT && e.window.event == SDL_WINDOWEVENT_FOCUS_LOST) {
        return true;
    }

    if (e.type == SDL_MOUSEBUTTONDOWN) {
        return true;
    }

    return false;
}

SDL_Surface* loadSurface(SDL_Surface* surface, std::string path)
{
    //The final optimized image
    SDL_Surface* optimizedSurface = NULL;

    //Load image at specified path
    SDL_Surface* loadedSurface = IMG_Load(path.c_str());
    if (loadedSurface == NULL)
    {
        printf("Unable to load image %s! SDL_image Error: %s\n", path.c_str(), IMG_GetError());
    }
    else
    {
        //Convert surface to screen format
        optimizedSurface = SDL_ConvertSurface(loadedSurface, surface->format, 0);
        if (optimizedSurface == NULL)
        {
            printf("Unable to optimize image %s! SDL Error: %s\n", path.c_str(), SDL_GetError());
        }

        //Get rid of old loaded surface
        SDL_FreeSurface(loadedSurface);
    }

    return optimizedSurface;
}

SDL_Window* create_window() {
    SDL_Window* window =
        SDL_CreateWindow("Not Malware", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED,
            800, 800, SDL_WINDOW_SHOWN);

    SDL_Surface* surface = SDL_GetWindowSurface(window);
    SDL_Surface* img = loadSurface(surface, "josh.png");

    SDL_BlitScaled(img, NULL, surface, NULL);
    SDL_UpdateWindowSurface(window);

    SDL_FreeSurface(img);

    return window;
}

int main(int argc, char** argv) {
    if (SDL_Init(SDL_INIT_VIDEO) < 0) {
        puts("Failed to init SDL");
        return -1;
    }
    if (IMG_Init(IMG_INIT_PNG) < 0) {
        puts("Failed to init img");
        return -1;
    }

    SDL_SysWMinfo info;
    SDL_VERSION(&info.version);

    std::vector<SDL_Window*> windows;

    SDL_Window* window = create_window();
    windows.push_back(window);
    bool quit = false;

    SDL_Event e;
    do {
        while (SDL_PollEvent(&e) != 0) {
            if (should_exit(e)) {
                quit = true;
                break;
            }
        }

        if (quit) {
            break;
        }
        Sleep(2000);
        window = create_window();
        windows.push_back(window);
    } while (true);

    for (SDL_Window* w : windows) {
        SDL_DestroyWindow(w);
    }

    return 0;
}